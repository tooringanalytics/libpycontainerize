# {{ domain.name }}.conf
# ssl_session_cache shared:SSL:1m; # 1MB is ~4000 sessions, if it fills old sessions are dropped
# ssl_session_timeout 1440m; # Reuse sessions for 24hrs

# Redirect all traffic to SSL
server {
    {% if (domain.default_server is defined) and domain.default_server %}
        listen 80 default_server;
    {% else %}
        listen 80;
    {% endif %}
    server_name {{ domain.server_name }};
    access_log off;
    error_log off;
    return 301 {{ domain.server_secure_url }}$request_uri;
}


{% for app in domain.apps %}
    # the upstream component nginx needs to connect to
    upstream uwsgi_{{ app.name }} {
        server {{ app.name }}:{{ app.uwsgi.port }}; # for a web port socket (we'll use this first)
    }
{% endfor %}


# Redirect {{ domain.server_name }} to {{ domain.server_fqdn }}
server {
    # the port your site will be served on, default_server indicates that this server block
    # is the block to use if no blocks match the server_name
    listen 443 ssl;
    server_name {{ domain.server_name }};

    access_log off;
    error_log off;

    # SSL/TLS stuff
    ssl_certificate {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/{{ domain.ssl_certificate }};
    ssl_certificate_key {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/{{ domain.ssl_certificate_key }};
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # Using list of ciphers from "Bulletproof SSL and TLS"
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_dhparam {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/dhparams.pem;
    add_header Strict-Transport-Security max-age=31536000; # HSTS for 1 year

    return 301 {{ domain.server_secure_url }}$request_uri;
}

# The actual server at {{ domain.server_secure_url }}
server {
    # the port your site will be served on, default_server indicates that this server block
    # is the block to use if no blocks match the server_name
    {% if (domain.default_server is defined) and domain.default_server %}
        listen 443 ssl default_server;
    {% else %}
        listen 443 ssl;
    {% endif %}

    # the domain name it will serve for
    server_name {{ domain.server_fqdn }}; # substitute your machine's IP address or FQDN
    charset     utf-8;
    access_log {{ project.deploy.docker.logs_dir }}/{{ domain.name }}-nginx-access.log;
    error_log {{ project.deploy.docker.logs_dir }}/{{domain.name}}-nginx-error.log warn;

    # SSL/TLS stuff
    ssl_certificate {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/{{ domain.ssl_certificate }};
    ssl_certificate_key {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/{{ domain.ssl_certificate_key }};
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    # Using list of ciphers from "Bulletproof SSL and TLS"
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
    ssl_dhparam {{ project.deploy.docker.certs_dir }}/domains/{{ domain.name }}/certs/dhparams.pem;
    add_header Strict-Transport-Security max-age=31536000; # HSTS for 1 year

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # Note: mount_point must either be empty "" (ie app mounted at root)
    # or mount_point should be a path starting with "/" but not ending in "/"

    {% for app in domain.apps %}
        ######## Configuration section for App {{ app.name }} ########

        {% if (app.maintenance_mode is defined) and app.maintenance_mode %}
            # App is in maintenance mode.
            error_page 503 /{{ app.maintenance_mode_html }};

            location = /{{ app.maintenance_mode_html }} {
                    root {{ project.deploy.docker.code_dir }}/{{ domain.name }}/{{ app.name }}/{{ app.django.project.path }}/staticfiles;
                    internal;
            }

            {% if app.mount_point %}
                location {{ app.mount_point }} {
                    return 503;
                }
            {% else %}
                location / {
                    return 503;
                }
            {% endif %}

        {% else %}
            # {{ app.name }} Django media
            location {{ app.mount_point }}/media  {
                # your Django project's media files - amend as required
                alias {{ project.deploy.docker.code_dir }}/{{domain.name}}/{{ app.name }}/{{ app.django.project.path }}/mediafiles;
            }

            # {{ app.name }} Django static files
            location {{ app.mount_point }}/static {
                # your Django project's static files - amend as required
                alias {{ project.deploy.docker.code_dir }}/{{ domain.name }}/{{ app.name }}/{{ app.django.project.path }}/staticfiles;
            }

            # Finally, send all non-media requests to the Django server.
            {% if app.mount_point %}
                location {{ app.mount_point }} {
                    include     /etc/nginx/uwsgi/{{ domain.name }}/{{ app.name }}/uwsgi_params; # the uwsgi_params file you installed
                    # Set the SCRIPT_NAME, then use the directive below to strip it
                    # from the PATH_INFO. This means the app is oblivious to the
                    # mount point it resides under.
                    uwsgi_param SCRIPT_NAME {{ app.mount_point }};
                    # The uwsgi_modifier1 30 option sets the uWSGI modifier
                    # UWSGI_MODIFIER_MANAGE_PATH_INFO. This per-request modifier
                    # instructs the uWSGI server to rewrite the PATH_INFO value
                    # removing the SCRIPT_NAME from it.
                    # Ref: http://davidjb.com/blog/2013/04/serving-uwsgi-apps-on-a-sub-directory-with-nginx/
                    uwsgi_modifier1 30;
                    uwsgi_read_timeout 300s;
                    uwsgi_send_timeout 300s;
                    uwsgi_pass  uwsgi_{{ app.name }};
                }
            {% else %}
                location / {
                    uwsgi_pass  uwsgi_{{ app.name }};
                    include     /etc/nginx/uwsgi/{{ domain.name }}/{{ app.name }}/uwsgi_params; # the uwsgi_params file you installed
                }
            {% endif %}

        {% endif %}

    {% endfor %}
}

